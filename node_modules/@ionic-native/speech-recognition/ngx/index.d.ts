import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare type SpeechRecognitionListeningOptions = SpeechRecognitionListeningOptionsIOS | SpeechRecognitionListeningOptionsAndroid;
export interface SpeechRecognitionListeningOptionsIOS {
    /**
     * used language for recognition (default `"en-US"`)
     */
    language?: string;
    /**
     * umber of return matches (default `5`)
     */
    matches?: number;
    /**
     * Allow partial results to be returned (default `false`)
     */
    showPartial?: boolean;
}
export interface SpeechRecognitionListeningOptionsAndroid {
    /**
     * used language for recognition (default `"en-US"`)
     */
    language?: string;
    /**
     * number of return matches (maximum number of matches)
     */
    matches?: number;
    /**
     * displayed prompt of listener popup window
     */
    prompt?: string;
    /**
     * display listener popup window with prompt (default `true`)
     */
    showPopup?: boolean;
    /**
     * Allow partial results to be returned (default `false`)
     */
    showPartial?: boolean;
}
/**
 * @name Speech Recognition
 * @description
 * This plugin does speech recognition using cloud services
 *
 * @usage
 * ```typescript
 * import { SpeechRecognition } from '@ionic-native/speech-recognition/ngx';
 *
 * constructor(private speechRecognition: SpeechRecognition) { }
 *
 * ...
 *
 *
 *
 * // Check feature available
 * this.speechRecognition.isRecognitionAvailable()
 *   .then((available: boolean) => console.log(available))
 *
 * // Start the recognition process
 * this.speechRecognition.startListening(options)
 *   .subscribe(
 *     (matches: string[]) => console.log(matches),
 *     (onerror) => console.log('error:', onerror)
 *   )
 *
 * // Stop the recognition process (iOS only)
 * this.speechRecognition.stopListening()
 *
 * // Get the list of supported languages
 * this.speechRecognition.getSupportedLanguages()
 *   .then(
 *     (languages: string[]) => console.log(languages),
 *     (error) => console.log(error)
 *   )
 *
 * // Check permission
 * this.speechRecognition.hasPermission()
 *   .then((hasPermission: boolean) => console.log(hasPermission))
 *
 * // Request permissions
 * this.speechRecognition.requestPermission()
 *   .then(
 *     () => console.log('Granted'),
 *     () => console.log('Denied')
 *   )
 *
 * ```
 */
export declare class SpeechRecognition extends IonicNativePlugin {
    /**
     * Check feature available
     * @return {Promise<boolean>}
     */
    isRecognitionAvailable(): Promise<boolean>;
    /**
     * Start the recognition process
     * @return {Promise< string[] >} list of recognized terms
     */
    startListening(options?: SpeechRecognitionListeningOptions): Observable<string[]>;
    /**
     * Stop the recognition process
     */
    stopListening(): Promise<void>;
    /**
     * Get the list of supported languages
     * @return {Promise< string[] >} list of languages
     */
    getSupportedLanguages(): Promise<string[]>;
    /**
     * Check permission
     * @return {Promise<boolean>} has permission
     */
    hasPermission(): Promise<boolean>;
    /**
     * Request permissions
     * @return {Promise<void>}
     */
    requestPermission(): Promise<void>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SpeechRecognition, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SpeechRecognition>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnMgPSBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNJT1MgfCBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNBbmRyb2lkO1xuZXhwb3J0IGludGVyZmFjZSBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNJT1Mge1xuICAgIC8qKlxuICAgICAqIHVzZWQgbGFuZ3VhZ2UgZm9yIHJlY29nbml0aW9uIChkZWZhdWx0IGBcImVuLVVTXCJgKVxuICAgICAqL1xuICAgIGxhbmd1YWdlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIHVtYmVyIG9mIHJldHVybiBtYXRjaGVzIChkZWZhdWx0IGA1YClcbiAgICAgKi9cbiAgICBtYXRjaGVzPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEFsbG93IHBhcnRpYWwgcmVzdWx0cyB0byBiZSByZXR1cm5lZCAoZGVmYXVsdCBgZmFsc2VgKVxuICAgICAqL1xuICAgIHNob3dQYXJ0aWFsPzogYm9vbGVhbjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zQW5kcm9pZCB7XG4gICAgLyoqXG4gICAgICogdXNlZCBsYW5ndWFnZSBmb3IgcmVjb2duaXRpb24gKGRlZmF1bHQgYFwiZW4tVVNcImApXG4gICAgICovXG4gICAgbGFuZ3VhZ2U/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogbnVtYmVyIG9mIHJldHVybiBtYXRjaGVzIChtYXhpbXVtIG51bWJlciBvZiBtYXRjaGVzKVxuICAgICAqL1xuICAgIG1hdGNoZXM/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogZGlzcGxheWVkIHByb21wdCBvZiBsaXN0ZW5lciBwb3B1cCB3aW5kb3dcbiAgICAgKi9cbiAgICBwcm9tcHQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogZGlzcGxheSBsaXN0ZW5lciBwb3B1cCB3aW5kb3cgd2l0aCBwcm9tcHQgKGRlZmF1bHQgYHRydWVgKVxuICAgICAqL1xuICAgIHNob3dQb3B1cD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQWxsb3cgcGFydGlhbCByZXN1bHRzIHRvIGJlIHJldHVybmVkIChkZWZhdWx0IGBmYWxzZWApXG4gICAgICovXG4gICAgc2hvd1BhcnRpYWw/OiBib29sZWFuO1xufVxuLyoqXG4gKiBAbmFtZSBTcGVlY2ggUmVjb2duaXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZG9lcyBzcGVlY2ggcmVjb2duaXRpb24gdXNpbmcgY2xvdWQgc2VydmljZXNcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNwZWVjaFJlY29nbml0aW9uIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zcGVlY2gtcmVjb2duaXRpb24vbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNwZWVjaFJlY29nbml0aW9uOiBTcGVlY2hSZWNvZ25pdGlvbikgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqXG4gKiAvLyBDaGVjayBmZWF0dXJlIGF2YWlsYWJsZVxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5pc1JlY29nbml0aW9uQXZhaWxhYmxlKClcbiAqICAgLnRoZW4oKGF2YWlsYWJsZTogYm9vbGVhbikgPT4gY29uc29sZS5sb2coYXZhaWxhYmxlKSlcbiAqXG4gKiAvLyBTdGFydCB0aGUgcmVjb2duaXRpb24gcHJvY2Vzc1xuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5zdGFydExpc3RlbmluZyhvcHRpb25zKVxuICogICAuc3Vic2NyaWJlKFxuICogICAgIChtYXRjaGVzOiBzdHJpbmdbXSkgPT4gY29uc29sZS5sb2cobWF0Y2hlcyksXG4gKiAgICAgKG9uZXJyb3IpID0+IGNvbnNvbGUubG9nKCdlcnJvcjonLCBvbmVycm9yKVxuICogICApXG4gKlxuICogLy8gU3RvcCB0aGUgcmVjb2duaXRpb24gcHJvY2VzcyAoaU9TIG9ubHkpXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLnN0b3BMaXN0ZW5pbmcoKVxuICpcbiAqIC8vIEdldCB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLmdldFN1cHBvcnRlZExhbmd1YWdlcygpXG4gKiAgIC50aGVuKFxuICogICAgIChsYW5ndWFnZXM6IHN0cmluZ1tdKSA9PiBjb25zb2xlLmxvZyhsYW5ndWFnZXMpLFxuICogICAgIChlcnJvcikgPT4gY29uc29sZS5sb2coZXJyb3IpXG4gKiAgIClcbiAqXG4gKiAvLyBDaGVjayBwZXJtaXNzaW9uXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLmhhc1Blcm1pc3Npb24oKVxuICogICAudGhlbigoaGFzUGVybWlzc2lvbjogYm9vbGVhbikgPT4gY29uc29sZS5sb2coaGFzUGVybWlzc2lvbikpXG4gKlxuICogLy8gUmVxdWVzdCBwZXJtaXNzaW9uc1xuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpXG4gKiAgIC50aGVuKFxuICogICAgICgpID0+IGNvbnNvbGUubG9nKCdHcmFudGVkJyksXG4gKiAgICAgKCkgPT4gY29uc29sZS5sb2coJ0RlbmllZCcpXG4gKiAgIClcbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3BlZWNoUmVjb2duaXRpb24gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgZmVhdHVyZSBhdmFpbGFibGVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIGlzUmVjb2duaXRpb25BdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgcmVjb2duaXRpb24gcHJvY2Vzc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8IHN0cmluZ1tdID59IGxpc3Qgb2YgcmVjb2duaXplZCB0ZXJtc1xuICAgICAqL1xuICAgIHN0YXJ0TGlzdGVuaW5nKG9wdGlvbnM/OiBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnMpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPjtcbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzXG4gICAgICovXG4gICAgc3RvcExpc3RlbmluZygpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwgc3RyaW5nW10gPn0gbGlzdCBvZiBsYW5ndWFnZXNcbiAgICAgKi9cbiAgICBnZXRTdXBwb3J0ZWRMYW5ndWFnZXMoKTogUHJvbWlzZTxzdHJpbmdbXT47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgcGVybWlzc2lvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IGhhcyBwZXJtaXNzaW9uXG4gICAgICovXG4gICAgaGFzUGVybWlzc2lvbigpOiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgcGVybWlzc2lvbnNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIHJlcXVlc3RQZXJtaXNzaW9uKCk6IFByb21pc2U8dm9pZD47XG59XG4iXX0=