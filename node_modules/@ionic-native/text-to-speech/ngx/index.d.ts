import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface TTSOptions {
    /** text to speak */
    text: string;
    /** a string like 'en-US', 'zh-CN', etc */
    locale?: string;
    /** speed rate, 0 ~ 1 */
    rate?: number;
}
/**
 * @name Text To Speech
 * @description
 * Text to Speech plugin
 *
 * @usage
 * ```typescript
 * import { TextToSpeech } from '@ionic-native/text-to-speech/ngx';
 *
 * constructor(private tts: TextToSpeech) { }
 *
 * ...
 *
 * this.tts.speak('Hello World')
 *   .then(() => console.log('Success'))
 *   .catch((reason: any) => console.log(reason));
 *
 * ```
 * @interfaces
 * TTSOptions
 */
export declare class TextToSpeech extends IonicNativePlugin {
    /**
     * This function speaks
     * @param textOrOptions {string | TTSOptions} Text to speak or TTSOptions
     * @return {Promise<any>} Returns a promise that resolves when the speaking finishes
     */
    speak(textOrOptions: string | TTSOptions): Promise<any>;
    /**
     * Stop any current TTS playback
     * @return {Promise<any>}
     */
    stop(): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TextToSpeech, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TextToSpeech>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmV4cG9ydCBpbnRlcmZhY2UgVFRTT3B0aW9ucyB7XG4gICAgLyoqIHRleHQgdG8gc3BlYWsgKi9cbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgLyoqIGEgc3RyaW5nIGxpa2UgJ2VuLVVTJywgJ3poLUNOJywgZXRjICovXG4gICAgbG9jYWxlPzogc3RyaW5nO1xuICAgIC8qKiBzcGVlZCByYXRlLCAwIH4gMSAqL1xuICAgIHJhdGU/OiBudW1iZXI7XG59XG4vKipcbiAqIEBuYW1lIFRleHQgVG8gU3BlZWNoXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRleHQgdG8gU3BlZWNoIHBsdWdpblxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVGV4dFRvU3BlZWNoIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS90ZXh0LXRvLXNwZWVjaC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdHRzOiBUZXh0VG9TcGVlY2gpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMudHRzLnNwZWFrKCdIZWxsbyBXb3JsZCcpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdTdWNjZXNzJykpXG4gKiAgIC5jYXRjaCgocmVhc29uOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlYXNvbikpO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIFRUU09wdGlvbnNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGV4dFRvU3BlZWNoIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gc3BlYWtzXG4gICAgICogQHBhcmFtIHRleHRPck9wdGlvbnMge3N0cmluZyB8IFRUU09wdGlvbnN9IFRleHQgdG8gc3BlYWsgb3IgVFRTT3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBzcGVha2luZyBmaW5pc2hlc1xuICAgICAqL1xuICAgIHNwZWFrKHRleHRPck9wdGlvbnM6IHN0cmluZyB8IFRUU09wdGlvbnMpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU3RvcCBhbnkgY3VycmVudCBUVFMgcGxheWJhY2tcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgc3RvcCgpOiBQcm9taXNlPGFueT47XG59XG4iXX0=