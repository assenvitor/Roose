import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export declare enum NotificationVisibility {
    Visible = 0,
    VisibleNotifyCompleted = 1,
    VisibilityHidden = 2,
    VisibleNotifyOnlyCompletion = 3,
}
export interface DownloadHttpHeader {
    header: string;
    value: string;
}
export interface DestinationDirectory {
    dirType: string;
    subPath: string;
}
export interface DownloadRequest {
    /**
     * Location of the resource to download
     */
    uri: string;
    /**
     * Set the title of this download, to be displayed in notifications (if enabled).
     * If no title is given, a default one will be assigned based on the download filename, once the download starts.
     */
    title?: string;
    /**
     * Set a description of this download, to be displayed in notifications (if enabled)
     */
    description?: string;
    /**
     * Set the MIME content type of this download. This will override the content type declared in the server's response.
     */
    mimeType?: string;
    /**
     * Set whether this download should be displayed in the system's Downloads UI. True by default.
     */
    visibleInDownloadsUi?: boolean;
    /**
     * Control whether a system notification is posted by the download manager while this download is running or when it is completed.
     */
    notificationVisibility?: NotificationVisibility;
    /**
     * Set the local destination for the downloaded file to a path within the application's external files directory
     */
    destinationInExternalFilesDir?: DestinationDirectory;
    /**
     * Set the local destination for the downloaded file to a path within the public external storage directory
     */
    destinationInExternalPublicDir?: DestinationDirectory;
    /**
     * Set the local destination for the downloaded file.
     * Must be a file URI to a path on external storage, and the calling application must have the WRITE_EXTERNAL_STORAGE permission.
     */
    destinationUri?: string;
    /**
     * Add an HTTP header to be included with the download request. The header will be added to the end of the list.
     */
    headers?: DownloadHttpHeader[];
}
/**
 * @name Downloader
 * @description
 * This plugin is designed to support downloading files using Android DownloadManager.
 *
 *
 * @usage
 * ```typescript
 * import { Downloader } from '@ionic-native/downloader/ngx';
 *
 *
 * constructor(private downloader: Downloader) { }
 *
 * ...
 *
 *    var request: DownloadRequest = {
 *           uri: YOUR_URI,
 *           title: 'MyDownload',
 *           description: '',
 *           mimeType: '',
 *           visibleInDownloadsUi: true,
 *           notificationVisibility: NotificationVisibility.VisibleNotifyCompleted,
 *           destinationInExternalFilesDir: {
 *               dirType: 'Downloads',
 *               subPath: 'MyFile.apk'
 *           }
 *       };
 *
 *
 *   this.downloader.download(request)
 *   			.then((location: string) => console.log('File downloaded at:'+location))
 *   			.catch((error: any) => console.error(error));
 *
 * ```
 * @interfaces
 * NotificationVisibility
 * Header
 * DestinationDirectory
 * DownloadHttpHeader
 */
export declare class Downloader extends IonicNativePlugin {
    /**
     *  Starts a new download and returns location of the downloaded file on completion
     *  @param request {DownloadRequest}
     */
    download(request: DownloadRequest): Promise<string>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Downloader, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Downloader>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGVudW0gTm90aWZpY2F0aW9uVmlzaWJpbGl0eSB7XG4gICAgVmlzaWJsZSA9IDAsXG4gICAgVmlzaWJsZU5vdGlmeUNvbXBsZXRlZCA9IDEsXG4gICAgVmlzaWJpbGl0eUhpZGRlbiA9IDIsXG4gICAgVmlzaWJsZU5vdGlmeU9ubHlDb21wbGV0aW9uID0gMyxcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRG93bmxvYWRIdHRwSGVhZGVyIHtcbiAgICBoZWFkZXI6IHN0cmluZztcbiAgICB2YWx1ZTogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBEZXN0aW5hdGlvbkRpcmVjdG9yeSB7XG4gICAgZGlyVHlwZTogc3RyaW5nO1xuICAgIHN1YlBhdGg6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRG93bmxvYWRSZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBMb2NhdGlvbiBvZiB0aGUgcmVzb3VyY2UgdG8gZG93bmxvYWRcbiAgICAgKi9cbiAgICB1cmk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHRpdGxlIG9mIHRoaXMgZG93bmxvYWQsIHRvIGJlIGRpc3BsYXllZCBpbiBub3RpZmljYXRpb25zIChpZiBlbmFibGVkKS5cbiAgICAgKiBJZiBubyB0aXRsZSBpcyBnaXZlbiwgYSBkZWZhdWx0IG9uZSB3aWxsIGJlIGFzc2lnbmVkIGJhc2VkIG9uIHRoZSBkb3dubG9hZCBmaWxlbmFtZSwgb25jZSB0aGUgZG93bmxvYWQgc3RhcnRzLlxuICAgICAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCBhIGRlc2NyaXB0aW9uIG9mIHRoaXMgZG93bmxvYWQsIHRvIGJlIGRpc3BsYXllZCBpbiBub3RpZmljYXRpb25zIChpZiBlbmFibGVkKVxuICAgICAqL1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgTUlNRSBjb250ZW50IHR5cGUgb2YgdGhpcyBkb3dubG9hZC4gVGhpcyB3aWxsIG92ZXJyaWRlIHRoZSBjb250ZW50IHR5cGUgZGVjbGFyZWQgaW4gdGhlIHNlcnZlcidzIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIG1pbWVUeXBlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIHRoaXMgZG93bmxvYWQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGUgc3lzdGVtJ3MgRG93bmxvYWRzIFVJLiBUcnVlIGJ5IGRlZmF1bHQuXG4gICAgICovXG4gICAgdmlzaWJsZUluRG93bmxvYWRzVWk/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENvbnRyb2wgd2hldGhlciBhIHN5c3RlbSBub3RpZmljYXRpb24gaXMgcG9zdGVkIGJ5IHRoZSBkb3dubG9hZCBtYW5hZ2VyIHdoaWxlIHRoaXMgZG93bmxvYWQgaXMgcnVubmluZyBvciB3aGVuIGl0IGlzIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBub3RpZmljYXRpb25WaXNpYmlsaXR5PzogTm90aWZpY2F0aW9uVmlzaWJpbGl0eTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGxvY2FsIGRlc3RpbmF0aW9uIGZvciB0aGUgZG93bmxvYWRlZCBmaWxlIHRvIGEgcGF0aCB3aXRoaW4gdGhlIGFwcGxpY2F0aW9uJ3MgZXh0ZXJuYWwgZmlsZXMgZGlyZWN0b3J5XG4gICAgICovXG4gICAgZGVzdGluYXRpb25JbkV4dGVybmFsRmlsZXNEaXI/OiBEZXN0aW5hdGlvbkRpcmVjdG9yeTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGxvY2FsIGRlc3RpbmF0aW9uIGZvciB0aGUgZG93bmxvYWRlZCBmaWxlIHRvIGEgcGF0aCB3aXRoaW4gdGhlIHB1YmxpYyBleHRlcm5hbCBzdG9yYWdlIGRpcmVjdG9yeVxuICAgICAqL1xuICAgIGRlc3RpbmF0aW9uSW5FeHRlcm5hbFB1YmxpY0Rpcj86IERlc3RpbmF0aW9uRGlyZWN0b3J5O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbG9jYWwgZGVzdGluYXRpb24gZm9yIHRoZSBkb3dubG9hZGVkIGZpbGUuXG4gICAgICogTXVzdCBiZSBhIGZpbGUgVVJJIHRvIGEgcGF0aCBvbiBleHRlcm5hbCBzdG9yYWdlLCBhbmQgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24gbXVzdCBoYXZlIHRoZSBXUklURV9FWFRFUk5BTF9TVE9SQUdFIHBlcm1pc3Npb24uXG4gICAgICovXG4gICAgZGVzdGluYXRpb25Vcmk/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWRkIGFuIEhUVFAgaGVhZGVyIHRvIGJlIGluY2x1ZGVkIHdpdGggdGhlIGRvd25sb2FkIHJlcXVlc3QuIFRoZSBoZWFkZXIgd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGhlYWRlcnM/OiBEb3dubG9hZEh0dHBIZWFkZXJbXTtcbn1cbi8qKlxuICogQG5hbWUgRG93bmxvYWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBpcyBkZXNpZ25lZCB0byBzdXBwb3J0IGRvd25sb2FkaW5nIGZpbGVzIHVzaW5nIEFuZHJvaWQgRG93bmxvYWRNYW5hZ2VyLlxuICpcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERvd25sb2FkZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Rvd25sb2FkZXIvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkb3dubG9hZGVyOiBEb3dubG9hZGVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAgICB2YXIgcmVxdWVzdDogRG93bmxvYWRSZXF1ZXN0ID0ge1xuICogICAgICAgICAgIHVyaTogWU9VUl9VUkksXG4gKiAgICAgICAgICAgdGl0bGU6ICdNeURvd25sb2FkJyxcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gKiAgICAgICAgICAgbWltZVR5cGU6ICcnLFxuICogICAgICAgICAgIHZpc2libGVJbkRvd25sb2Fkc1VpOiB0cnVlLFxuICogICAgICAgICAgIG5vdGlmaWNhdGlvblZpc2liaWxpdHk6IE5vdGlmaWNhdGlvblZpc2liaWxpdHkuVmlzaWJsZU5vdGlmeUNvbXBsZXRlZCxcbiAqICAgICAgICAgICBkZXN0aW5hdGlvbkluRXh0ZXJuYWxGaWxlc0Rpcjoge1xuICogICAgICAgICAgICAgICBkaXJUeXBlOiAnRG93bmxvYWRzJyxcbiAqICAgICAgICAgICAgICAgc3ViUGF0aDogJ015RmlsZS5hcGsnXG4gKiAgICAgICAgICAgfVxuICogICAgICAgfTtcbiAqXG4gKlxuICogICB0aGlzLmRvd25sb2FkZXIuZG93bmxvYWQocmVxdWVzdClcbiAqICAgXHRcdFx0LnRoZW4oKGxvY2F0aW9uOiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKCdGaWxlIGRvd25sb2FkZWQgYXQ6Jytsb2NhdGlvbikpXG4gKiAgIFx0XHRcdC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIE5vdGlmaWNhdGlvblZpc2liaWxpdHlcbiAqIEhlYWRlclxuICogRGVzdGluYXRpb25EaXJlY3RvcnlcbiAqIERvd25sb2FkSHR0cEhlYWRlclxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEb3dubG9hZGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqICBTdGFydHMgYSBuZXcgZG93bmxvYWQgYW5kIHJldHVybnMgbG9jYXRpb24gb2YgdGhlIGRvd25sb2FkZWQgZmlsZSBvbiBjb21wbGV0aW9uXG4gICAgICogIEBwYXJhbSByZXF1ZXN0IHtEb3dubG9hZFJlcXVlc3R9XG4gICAgICovXG4gICAgZG93bmxvYWQocmVxdWVzdDogRG93bmxvYWRSZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmc+O1xufVxuIl19