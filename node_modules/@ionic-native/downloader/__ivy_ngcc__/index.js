import * as ɵngcc0 from '@angular/core';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
export var NotificationVisibility;
(function (NotificationVisibility) {
    NotificationVisibility[NotificationVisibility["Visible"] = 0] = "Visible";
    NotificationVisibility[NotificationVisibility["VisibleNotifyCompleted"] = 1] = "VisibleNotifyCompleted";
    NotificationVisibility[NotificationVisibility["VisibilityHidden"] = 2] = "VisibilityHidden";
    NotificationVisibility[NotificationVisibility["VisibleNotifyOnlyCompletion"] = 3] = "VisibleNotifyOnlyCompletion";
})(NotificationVisibility || (NotificationVisibility = {}));
/**
 * @name Downloader
 * @description
 * This plugin is designed to support downloading files using Android DownloadManager.
 *
 *
 * @usage
 * ```typescript
 * import { Downloader } from '@ionic-native/downloader/ngx';
 *
 *
 * constructor(private downloader: Downloader) { }
 *
 * ...
 *
 *    var request: DownloadRequest = {
 *           uri: YOUR_URI,
 *           title: 'MyDownload',
 *           description: '',
 *           mimeType: '',
 *           visibleInDownloadsUi: true,
 *           notificationVisibility: NotificationVisibility.VisibleNotifyCompleted,
 *           destinationInExternalFilesDir: {
 *               dirType: 'Downloads',
 *               subPath: 'MyFile.apk'
 *           }
 *       };
 *
 *
 *   this.downloader.download(request)
 *   			.then((location: string) => console.log('File downloaded at:'+location))
 *   			.catch((error: any) => console.error(error));
 *
 * ```
 * @interfaces
 * NotificationVisibility
 * Header
 * DestinationDirectory
 * DownloadHttpHeader
 */
var Downloader = (function (_super) {
    __extends(Downloader, _super);
    function Downloader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *  Starts a new download and returns location of the downloaded file on completion
     *  @param request {DownloadRequest}
     */
    /**
       *  Starts a new download and returns location of the downloaded file on completion
       *  @param request {DownloadRequest}
       */
    Downloader.prototype.download = /**
       *  Starts a new download and returns location of the downloaded file on completion
       *  @param request {DownloadRequest}
       */
    function (request) {
        return;
    };
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], Downloader.prototype, "download", null);
    /**
     * @name Downloader
     * @description
     * This plugin is designed to support downloading files using Android DownloadManager.
     *
     *
     * @usage
     * ```typescript
     * import { Downloader } from '@ionic-native/downloader/ngx';
     *
     *
     * constructor(private downloader: Downloader) { }
     *
     * ...
     *
     *    var request: DownloadRequest = {
     *           uri: YOUR_URI,
     *           title: 'MyDownload',
     *           description: '',
     *           mimeType: '',
     *           visibleInDownloadsUi: true,
     *           notificationVisibility: NotificationVisibility.VisibleNotifyCompleted,
     *           destinationInExternalFilesDir: {
     *               dirType: 'Downloads',
     *               subPath: 'MyFile.apk'
     *           }
     *       };
     *
     *
     *   this.downloader.download(request)
     *   			.then((location: string) => console.log('File downloaded at:'+location))
     *   			.catch((error: any) => console.error(error));
     *
     * ```
     * @interfaces
     * NotificationVisibility
     * Header
     * DestinationDirectory
     * DownloadHttpHeader
     */
    Downloader = __decorate([
        Plugin({
            pluginName: 'Downloader',
            plugin: 'integrator-cordova-plugin-downloader',
            pluginRef: 'cordova.plugins.Downloader',
            repo: 'https://github.com/Luka313/integrator-cordova-plugin-downloader.git',
            platforms: ['Android']
        })
    ], Downloader);
Downloader.ɵfac = function Downloader_Factory(t) { return ɵDownloader_BaseFactory(t || Downloader); };
Downloader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Downloader, factory: function (t) { return Downloader.ɵfac(t); } });
var ɵDownloader_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Downloader);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Downloader, [{
        type: Injectable
    }], null, null); })();
    return Downloader;
}(IonicNativePlugin));
export { Downloader };

//# sourceMappingURL=index.js.map